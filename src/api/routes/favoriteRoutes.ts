import { Router } from "express";
import * as favoriteController from "../controllers/favoriteController";
import { authenticateToken } from "../middlewares/authMiddleware";
import prisma from "../../config/prismaClient";

const router = Router();

// Endpoint de teste (sem autentica√ß√£o)
router.get("/test", (req, res) => {
  res.json({
    message: "Rotas de favoritos funcionando!",
    timestamp: new Date().toISOString(),
  });
});

// Endpoint para testar cria√ß√£o de favoritos (sem autentica√ß√£o para debug)
router.post("/test-create", async (req, res) => {
  try {
    console.log("üß™ Teste de cria√ß√£o de favorito - Body:", req.body);
    console.log("üß™ Teste de cria√ß√£o de favorito - Headers:", req.headers);

    // Simular dados de teste
    const testData = {
      metId: req.body.metId || 436535,
      userId: req.body.userId || 1,
      message: "Teste de cria√ß√£o de favorito",
    };

    res.json({
      success: true,
      testData,
      message: "Endpoint de teste funcionando!",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("‚ùå Erro no teste:", error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
});

// Endpoint de debug para verificar o estado do banco (sem autentica√ß√£o)
router.get("/debug", async (req, res) => {
  try {
    console.log("üîç Debug - Verificando estado do banco...");

    // Verificar usu√°rios
    const users = await prisma.user.findMany({
      select: { id: true, name: true, email: true, createdAt: true },
    });

    // Verificar favoritos
    const favorites = await prisma.favorite.findMany({
      select: { id: true, userId: true, metId: true, createdAt: true },
    });

    // Verificar obras
    const artworks = await prisma.artwork.findMany({
      select: { id: true, metId: true, title: true, userId: true },
    });

    const debugInfo = {
      timestamp: new Date().toISOString(),
      database: {
        users: {
          count: users.length,
          data: users,
        },
        favorites: {
          count: favorites.length,
          data: favorites,
        },
        artworks: {
          count: artworks.length,
          data: artworks,
        },
      },
      message: "Informa√ß√µes de debug do banco de dados",
    };

    console.log("üîç Debug - Informa√ß√µes coletadas:", debugInfo);
    res.json(debugInfo);
  } catch (error) {
    console.error("‚ùå Erro no debug:", error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString(),
    });
  }
});

// Endpoint para criar usu√°rio de teste (sem autentica√ß√£o)
router.post("/create-test-user", async (req, res) => {
  try {
    console.log("üß™ Criando usu√°rio de teste...");

    // Verificar se j√° existe um usu√°rio de teste
    const existingUser = await prisma.user.findFirst({
      where: { email: "teste2@galeria.com" },
    });

    if (existingUser) {
      console.log("‚úÖ Usu√°rio de teste j√° existe:", existingUser);
      return res.json({
        success: true,
        message: "Usu√°rio de teste j√° existe",
        user: {
          id: existingUser.id,
          name: existingUser.name,
          email: existingUser.email,
        },
        credentials: {
          email: "teste2@galeria.com",
          password: "123456",
        },
      });
    }

    // Importar bcrypt para hash da senha
    const bcrypt = require("bcryptjs");
    const hashedPassword = await bcrypt.hash("123456", 10);

    console.log("üîê Senha hash criada:", hashedPassword);

    // Criar usu√°rio de teste
    const testUser = await prisma.user.create({
      data: {
        name: "Usu√°rio Teste 2",
        email: "teste2@galeria.com",
        password: hashedPassword,
      },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true,
      },
    });

    console.log("‚úÖ Usu√°rio de teste criado:", testUser);

    res.json({
      success: true,
      message: "Usu√°rio de teste criado com sucesso",
      user: testUser,
      credentials: {
        email: "teste2@galeria.com",
        password: "123456",
      },
    });
  } catch (error) {
    console.error("‚ùå Erro ao criar usu√°rio de teste:", error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString(),
    });
  }
});

// Endpoint para criar uma conta real para voc√™ (sem autentica√ß√£o)
router.post("/create-real-user", async (req, res) => {
  try {
    console.log("üë§ Criando conta real para o usu√°rio...");

    const { name, email, password } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({
        success: false,
        message: "Nome, email e senha s√£o obrigat√≥rios",
      });
    }

    // Verificar se j√° existe um usu√°rio com este email
    const existingUser = await prisma.user.findFirst({
      where: { email: email },
    });

    if (existingUser) {
      console.log("‚ö†Ô∏è Usu√°rio j√° existe:", existingUser);
      return res.json({
        success: true,
        message: "Usu√°rio j√° existe",
        user: {
          id: existingUser.id,
          name: existingUser.name,
          email: existingUser.email,
        },
        credentials: {
          email: email,
          password: "*** (j√° cadastrada)",
        },
      });
    }

    // Importar bcrypt para hash da senha
    const bcrypt = require("bcryptjs");
    const hashedPassword = await bcrypt.hash(password, 10);

    console.log("üîê Senha hash criada para usu√°rio real");

    // Criar usu√°rio real
    const realUser = await prisma.user.create({
      data: {
        name: name,
        email: email,
        password: hashedPassword,
      },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true,
      },
    });

    console.log("‚úÖ Usu√°rio real criado:", realUser);

    res.json({
      success: true,
      message: "Conta criada com sucesso!",
      user: realUser,
      credentials: {
        email: email,
        password: password,
      },
    });
  } catch (error) {
    console.error("‚ùå Erro ao criar usu√°rio real:", error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString(),
    });
  }
});

// Todas as rotas de favoritos requerem autentica√ß√£o
router.use(authenticateToken);

// Adicionar aos favoritos
router.post("/", favoriteController.addFavorite);

// Listar favoritos do usu√°rio
router.get("/", favoriteController.getUserFavorites);

// Remover dos favoritos
router.delete("/:favoriteId", favoriteController.removeFavorite);

export default router;
